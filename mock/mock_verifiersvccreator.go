// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bayugyug/authorizer (interfaces: VerifierServiceCreator)

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	authorizer "github.com/bayugyug/authorizer"
	gomock "github.com/golang/mock/gomock"
)

// MockVerifierServiceCreator is a mock of VerifierServiceCreator interface.
type MockVerifierServiceCreator struct {
	ctrl     *gomock.Controller
	recorder *MockVerifierServiceCreatorMockRecorder
}

// MockVerifierServiceCreatorMockRecorder is the mock recorder for MockVerifierServiceCreator.
type MockVerifierServiceCreatorMockRecorder struct {
	mock *MockVerifierServiceCreator
}

// NewMockVerifierServiceCreator creates a new mock instance.
func NewMockVerifierServiceCreator(ctrl *gomock.Controller) *MockVerifierServiceCreator {
	mock := &MockVerifierServiceCreator{ctrl: ctrl}
	mock.recorder = &MockVerifierServiceCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifierServiceCreator) EXPECT() *MockVerifierServiceCreatorMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockVerifierServiceCreator) Sign(arg0 *authorizer.AuthClaims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockVerifierServiceCreatorMockRecorder) Sign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockVerifierServiceCreator)(nil).Sign), arg0)
}

// UnSign mocks base method.
func (m *MockVerifierServiceCreator) UnSign(arg0 *http.Request) (*authorizer.AuthClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSign", arg0)
	ret0, _ := ret[0].(*authorizer.AuthClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSign indicates an expected call of UnSign.
func (mr *MockVerifierServiceCreatorMockRecorder) UnSign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSign", reflect.TypeOf((*MockVerifierServiceCreator)(nil).UnSign), arg0)
}
